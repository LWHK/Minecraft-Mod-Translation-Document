亟需完善

[index]
[#1]前言
[#2]如何找到模组中的语言文件？
[#3]如何搭建一个适合翻译工作的工作区域？
*[#4]文本编辑器
*[#5]词典以及在线词典网站
*[#6]进阶小技巧
[#7]汉化提交的多种途径
*[#8]通过GitHub进行汉化工作
**[#9]GitHub入门
***[#10]申请账号
***[#11]相关概念以及工作流程
****[#12]fork
****[#13]将仓库clone到本地（可选）
****[#14]pull request
****[#15]review（比较重要的可选项）
****[#16]与原仓库同步
**[#17]原库提交（不推荐新手）
**[#18]CFPA提交
***[#19]CFPA仓库地址以及项目存放位置
*[#21]通过Weblate进行汉化工作
*[#20]通过GitHub搭建翻译团体，以及进行翻译管理
[#22]汉化的一些注意事项
*[#23]每天一个机翻小技巧，有手就能学废
*[#24]意外情况
**[#25]不加载
***[#26]完全不加载
***[#27]部分不加载
**[#28]文字乱码


[/index]


[size=32px][b]前言[/b][/size]

[size=16px]粗略查了查，似乎目前站内还没有一个当前版本（指1.12.2以后）的汉化流程教学。其实很多时候不是没有人翻译，而是很多人自己做了个翻译，也想共享出来，却找不到门路，找到人之后，还需要手把手的教学。但其实这些可能都不是完全必要的，如果有足够详细且系统的帖子能够写明一些规范化处理的流程（或者说，正是在书写的过程中，这一过程被规范化了），那么想要参与到汉化工作之中来的人就能很快的上手并充分输出自身的生产力了（悲）。[/size]

[size=16px]总而言之，以上所说的就是本帖的目的——当前版本下的汉化流程，以及提交流程，我会尽量将我所知道的流程尽可能的写清楚，方便之后的人查阅和学习。[/size]

[size=16px]但在这之前要注意，如果你的英语水平还很差，那么我还是不建议你参与到汉化工作中来。有些人可能觉得，翻译的工作不是查一查词典，找一找语法书就好了吗？这样想的人，都还too young，想法也非常的naive，我们可以引用一段本雅明的《译者的任务》中的文段，来阐明这一问题：[/size]

[quote][size=16px]文学作品的基本特性并不是陈述事实或发布信息。然而任何执行传播功能的翻译所传播的只能是信息，也就是说，它传播的只是非本质的东西。这是拙劣译文的特征。但是人们普遍认为为文学作品的实质是信息之外的东西。就连拙劣的译者也承认，文学作品的精髓是某种深不可测的、神秘的、“诗意的”东西；翻译家如要再现这种东西，自己必须也是一个诗人。[/size][/quote]
[size=16px]mod翻译明显不是文学作品，然而它们总有着部分的相似之处。所以这里也很明显的说出了一些问题，这些问题至今在大部分翻译者那里都存在着——如果你的句子仅仅是纯粹的词语+语法的堆砌，那么你的译文毫无疑问就是拙劣的译文。而那些甚至连最基本的中文语序以及逻辑都把握不到的翻译者，翻译出来的东西简直惨不忍睹，不忍直视，甚至称不上这里所说的“拙劣的译文”。毫无疑问，这里所说的两种不好的译文，都是由于经验的不足而导致的，这一经验指的不是英语阅读的经验，而是将其从英语转变为中文的经验，这同时考校了你双边的实力。[/size]

[size=16px]话不多说，我们开始正题。[/size]

[size=16px]来自 [url=https://github.com/LWHK]LWHK organization[/url][/size]

[size=16px][page][/size]

[size=32px][b]如何找到模组中的语言文件？[/b][/size]

[size=16px]右键你的模组，使用压缩软件的方式进行打开。例如，我使用的是360压缩，那么右键模组文件之后，会出现如下提示：[/size]

[size=16px][img]https://i.loli.net/2020/08/13/Hg3AtWLTCj1lzs2.jpg[/img][/size]

[size=16px]点开之后是这个样子：[/size]

[size=16px][img]https://i.loli.net/2020/08/13/lQYnw4gOu85SHXC.jpg[/img][/size]

[size=16px]依次进入：assets\模组 ID\lang，就会发现：[/size]

[size=16px][img]https://i.loli.net/2020/08/13/Drq6WykR9pYsfJ1.jpg[/img][/size]

[size=16px]1是英文的语言文件，2是中文的语言文件，如果没有2，就说明这一个模组没有中文的翻译，你可以按照其英语文本进行翻译，翻译完之后，把文件改名为2，也就是zh_cn.lang，然后将其放进上述的目录，这样，这样你在游戏中就可以读取到翻译了！[/size]

[size=16px]顺带一提，在1.12.2中，语言文件为.lang文件，但在1.12.2以上的版本中，则是.json文件。[/size]

[size=16px][page][/size]

[size=32px][b]如何搭建一个适合翻译工作的工作区域？[/b][/size]

[size=16px]如果上述都还是一些人尽皆知的小技巧，那么，接下来的内容就只有翻译工们才会知道了，而且每位汉化者都有自己的舒服的一些工具，有些工具性能较好，有些工具则是功能取胜，这些全看个人选择，所以，以下只是我个人的经验之谈。[/size]

[size=16px]在这里，必要的部分只有文本编辑器，在必要的部分之后，我会列出可选的软件，这些软件有一些可以提升你的工作效率，有些则关乎你接下来提交汉化的路径。 [page][/size]

[size=24px][b]文本编辑器[/b][/size]

[size=16px]对我而言，我装的文本编辑器有两个：[/size]

[size=16px]1.轻量编辑器：Notepad++（不再推荐）[/size]

[size=16px]原本我是想着说，如果不谈zz，那么这款软件其实完全是可以推荐的。但是自从我上了它的官网，我发现作者已经到了非常嚣张的地步，所以还是不推荐了，如果想用轻量编辑器，换一个[b]Notepad3[/b]可能会好一些。[/size]

[size=16px]之所以我会说你需要一款轻量编辑器，是因为有时候其实你根本不需要这么多的功能，你只需要一定的语法高亮，看看排版，查查错误，仔细看看翻译质量。这时候，如果再搬出一些庞然大物，那有点杀鸡用牛刀的意味。[/size]

[size=16px]2.主力军：[b]VSCode[/b][/size]

[size=16px]这位就是我们汉化工作的主要工作区域，这是它的下载地址：[url=https://code.visualstudio.com/]https://code.visualstudio.com/[/url][/size]

[size=16px]下载完成后，界面是这样的：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/GJAH54rwMs16q7u.jpg[/img][/size]

[size=16px]在上面我分别标注出了几个需要注意的地方。然后你就可以开始你的工作区搭建了！[/size]

[size=16px]首先是点进扩展管理，在上面搜索"Chinese (Simplified) Language Pack for Visual Studio Code"，然后安装第一个跳出的插件，你就会发现你的界面已经变成了中文。[/size]

[size=16px]然后你还需要安装以下扩展：[/size]

[size=16px][list=1]
[*]Minecraft Lang Colorizer（必装）
[*]Minecraft JSON Schemas（自选）[/list][/size]
[size=16px]第一个是使得vsc支持读取lang文件，这是对比图：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/ntAk6flIHih2BU8.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/15/jwGKPog1ubNRWlz.jpg[/img][/size]

[size=16px]需要注意的是，如果你在安装了这个扩展之后，lang文件没有发生变化，你需要手动将一个lang文件设置为lang文件格式，之后，vsc就可以自动为你设置了。[/size]

[size=16px]基本上，安装了这些之后，你就可以畅通无阻的进行你的汉化工作了！[/size]

[size=16px][page][/size]

[size=24px][b]词典以及在线词典网站[/b][/size]

[size=16px]如果你的词汇量足够丰富，那么你在进行翻译的过程中肯定可以顺畅无比。但是实际上很多人根本做不到这样，因此词典软件就必不可少了。[/size]

[size=16px]我个人使用的词典是欧路词典：[url=https://dict.eudic.net/]https://dict.eudic.net/[/url][/size]

[size=16px]还是不错的，安装了桌面版之后，打开划词翻译，打开vsc，只需要选中你想查询的词，即可查出意思，非常好用。[/size]

[size=16px]有道词典的桌面版也不错，然而和我的电脑有bug，所以卸了，但是有道的划词检索很快，不像欧陆，有时候划词检索不出来，还会卡住，但这些情况还是较少的。[/size]

[size=16px]长句子翻译非常推荐DeepL，令人惊叹的翻译准度，以至于我的哲学论文有很大一部分的内容都是它帮助我翻译的：[/size]

[size=16px][url=https://www.deepl.com/]https://www.deepl.com/[/url][/size]

[size=16px]顺带一些在线词典网站推荐：[/size]

[size=16px][url=https://dict.mcmod.cn/]https://dict.mcmod.cn/[/url]  mcmod词典[/size]

[size=16px][url=https://translate.google.cn/]https://translate.google.cn/[/url]  谷歌翻译[/size]

[size=16px]如果你有苹果移动端设备并且使用方便，直接打开手机，在主屏幕下滑打开搜索栏，输入英语词汇即可翻译。词典种类很丰富，甚至部分支持其它几个印欧语系的语言、日语及汉语。[/size]

[size=16px][page][/size]

[size=24px][b]进阶小技巧[/b][/size]

[size=16px]汉化中总是会遇上那种重复率很高，已经定番的词，比如red，green这种颜色，而且这种词往往不会是单个出现，而是一次性出现17个，也就是原版所有颜色的合集。而且，如果一次性出现很多次（比如在装饰类mod里），那给人带来极强的烦躁感。[/size]

[size=16px]这时候我们就需要一些小工具了，我个人推荐的是Quicker：[url=https://getquicker.net/]https://getquicker.net/[/url][/size]

[size=16px]我不负责从头教，你可以自己去搜一搜相关的使用教程。这个小工具用处很大，这里只是列举出其中的一种。[/size]

[size=16px][img]https://i.loli.net/2020/08/14/7NrBnyK9QxpcCLS.jpg[/img][/size]

[size=16px]这是我自己写出来的一个小的替换颜色的脚本，难度不高，可以自己尝试一下。[/size]

[size=16px]或者复制这个，然后粘贴在quicker上：[/size]

[size=16px][url=https://getquicker.net/sharedaction?code=73bfacbd-69c8-41b8-1a2a-08d83f7686c1]https://getquicker.net/sharedaction?code=73bfacbd-69c8-41b8-1a2a-08d83f7686c1[/url][/size]

[size=16px]========================================================================================[/size]

[size=16px]如果你想实时与同伴一同汉化一个项目，该怎么操作呢？[/size]

[size=16px]vsc有个拓展，叫做Live share，登陆之后就可以分享你当前的工作区了！只需以链接的形式发送给朋友，朋友点击，然后接受，就可以实时翻译了！[/size]

[size=16px]装了拓展之后，会在vsc的下方显示这个东西：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/mjipLV2nzDTHhl8.jpg[/img][/size]

[size=16px]点击之后，就会提示你登录，登陆之后，按着提示最后点击OK，右下角就会提示，已经将连接置入剪贴板。[/size]

[size=16px]发送到朋友那里之后，朋友点进去，将会是这样：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/nMzhFQiCbmGxZPp.jpg[/img][/size]

[size=16px]注意，你的朋友也需要登录！！[/size]

[size=16px]然后只需点击“打开 Live Share for Vs Code”，就可以完成了！[/size]

[size=16px][page][/size]

[size=32px][b]汉化提交的多种途径[/b][/size]

[size=16px]在mc中，汉化提交可以以多种途径进行，但大体上分为：[/size]

[size=16px][list=1]
[*]使用GitHub进行汉化工作。
[*]使用Weblate进行汉化工作（暂缓更新）[/list][/size]
[size=16px]本文主要围绕1进行讲解，2的讲解暂且搁置，因为目前wl出于维护阶段，暂不可用，目前最稳妥的方法就是走GitHub进行汉化提交、[/size]

[size=16px]注意，如果你只是想单纯的进行汉化工作，自己使用或是给周围有限的人使用，那么提交汉化是完全没有必要的，这一部分只是写给那些想要融入当前模组翻译汉化圈子的人。 [page][/size]

[size=24px][b]通过GitHub进行汉化工作[/b][/size]

[size=16px]如果你想通过GitHub来进行你的汉化流程，那么首先你得了解GitHub是什么，以及它的相关操作。[/size]

[size=16px][page][/size]

[size=20px][b]GitHub入门[/b][/size]

[size=16px]本节将会告诉你如何注册GitHub账号，以及GitHub的一些你需要认识的术语，以及这些术语所代表的操作如何进行，这些都是重中之重，很多汉化者被卡在了这一步。所以在这一节里，我会尽可能的配上图片，这样讲解的更为清晰明了。先申明，本人没有编程经验，对于GitHub的操作难免也有疏漏的地方，所以也恳请各位看官斧正一二，感激不尽。[/size]

[size=16px]提前声明，对于某些地区的用户来说，GitHub的速度奇慢无比，很多时候无法正常加载，这种情况下往往需要隧穿术穿墙而过才能正常加载。然而本帖不负责教授你隧穿术。对于那些有需求但是不知道去哪里学习隧穿术的年轻秘法巫师们，我建议你多去造访一些巫师塔，譬如知乎等。[/size]

[size=16px]顺便提醒一下，自行搭建隧穿法阵可能会被圣祠收容。 [page][/size]

[size=16px][b]申请账号[/b][/size]

[size=16px]这是进入GitHub的第一步。首先打开网址：[url=https://github.com/，然后你大概会看见如下的网页：]https://github.com/，然后你大概会看见如下的网页：[/url][/size]

[size=16px][img]https://i.loli.net/2020/08/14/hIRCSKYHpFiw29D.jpg[/img][/size]

[size=16px]如果你始终加载不出来，那可能你需要隧穿术来帮助你穿过这道墙，但这一精深的课题已经超出了本帖的范围，不再详述。[/size]

[size=16px]接着你需要注册一个账号，只需要遵循着引导流程，即可注册一个属于你自己的账号了。如果在注册过程中出现了验证等加载不出来的情况，那么可能也需要使用隧穿术进行网页加载。（最近墙有点厚，忍着吧）。[/size]

[size=16px]注册完毕后，你的界面将会变成这样：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/pHBjKSRUNaE7IOC.jpg[/img][/size]

[size=16px]可能在一些小细节上有出入，但无伤大雅，大体一致即可。[/size]

[size=16px]到了这里，你就拥有了一个GitHub账号了！ [page][/size]

[size=16px][b]相关概念以及工作流程[/b][/size]

[size=16px]在这一小节中，我会先介绍汉化提交的流程，然后再流程之中抓出相应的概念进行讲解。[/size]

[size=16px]工作流程大体为找到仓库→Fork→修改Fork过来的仓库→发送Pull Request（拉取请求）到原仓库。[/size]

[size=16px]接下来是详细讲解：[/size]

[size=16px]1.在[url=https://www.curseforge.com/minecraft/mc-mods]curseforge[/url]上找到自己想要汉化的mod，这里随便以一个mod为例：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/PzqieXIyL6cna2D.jpg[/img][/size]

[size=16px]这里以JEI做个例子，点进去之后，我们可以找到这个图标：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/fSArFdPxZcRE5Hu.jpg[/img][/size]

[size=16px]点进这个图标，就可以跳转到这个mod对应的GitHub仓库，这样我们就找到了可以提交汉化的模组的GitHub仓库了。[/size]

[size=16px]2.Fork[/size]

[size=16px]这是JEI的仓库：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/l9HDhCnoPpJmx7g.jpg[/img][/size]

[size=16px]我们点击右上角的Fork，将这份仓库Fork为自己的。（如果你不明白为什么需要这样做，你可以跳转到相应的章节查看解释）。[/size]

[size=16px]3.修改仓库的内容[/size]

[size=16px]到了这一步，你就可以将你之前的汉化提交到 GitHub上了。首先你需要找出你汉化过后的文件，然后将你的文件上传到GitHub。如何上传呢？首先你得找到藏在仓库中的对应文件。还记得第一小节里的那个zh_cn.,lang吗？我们已经知道了这一文件在模组文件的哪个位置，而GitHub仓库储存了这一模组的全部文件，那么我们只需要找到仓库中同样的位置就好了。[/size]

[size=16px]一番查找之后：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/lxRb3eGyh4W9CZj.jpg[/img][/size]

[size=16px]记住这个位置，你的文件应该上传到lang文件夹里，就和在模组里一样！其中的几个文件夹名字是不固定的，取决于模组的名字，相信你一眼就能明白哪些是不固定的了。[/size]

[size=16px]这里换了一个仓库，点击圈内按钮，选择upload file，就可以上传文件了！[/size]

[size=16px][img]https://i.loli.net/2020/08/14/rt6PKXvByfM1LVI.jpg[/img][/size]

[size=16px]4.拉取请求[/size]

[size=16px]这个仓库是你的，但是你的仓库知识原仓库的一个副本，如果你想要把你的修改合并到原仓库，那么你应该怎么做？这时候我们就需要发送[b]Pull Request[/b]（拉取请求，简称PR）到原仓库。[/size]

[size=16px]我们先回到原仓库，依次点击：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/bCso5nykqIFQ3pU.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/14/WEsk6LD8jHNifAt.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/14/m8W74nEaV1bHfUP.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/14/xVdDraEycZeXMkU.jpg[/img][/size]

[size=16px]然后你会在页面的下方看到你和原仓库的对比，游览且发现没问题之后，点击Create pull request，然后填上一些你想说的就好了。[/size]

[size=16px]注意，在pr的信息填写里，不要给欧美的作者发中文，他们是看不懂的。你的目的是给他们发送汉化文件，[b]不是使用中文和他们聊天！[/b]。（但可以用英文和他们聊）[/size]

[size=16px]遵照上述的流程，你就可以顺利将你的汉化提交至作者那边了！但是你还是需要稍微等待，毕竟作者也不可能一直守着电脑，等到作者有空的时候，他会回复你，并决定是否采用你的汉化文件。 [page][/size]

[size=14px][b]fork[/b][/size]

[size=16px]为什么需要fork？[/size]

[size=16px]你应该注意到，你其实对别人的仓库是没有修改的权限的（废话）。所以Fork的操作就相当于，你将他的仓库抄了一遍，然后你在这个抄本上进行修改，这是可以的，[b]因为这是你的抄本[/b]。[/size]

[size=16px]我们引一段资料：[/size]

[quote][size=16px]如果你 “fork” 一个仓库，则是指[b]复制它[/b]。特别是当你 fork 属于别人的仓库时，你将制作他们[b]仓库的完全一样的副本[/b]，之后[b]这个副本便变成你的[/b]。[/size][/quote]
[size=16px]注意这里的用词，“[b]变成你的[/b]”意味着你对于这个仓库有着完全的控制权，包括删除仓库，所以修改你自己的仓库也自然不在话下了。[/size]

[size=16px][page][/size]

[size=14px][b]将仓库clone到本地（可选，较为重要）[/b][/size]

[size=16px]当你同时参与了多个项目的汉化之后，你会遇到一个严峻的事实：每天打开游览器，登上GitHub，一旦作者们更新勤奋，你就要开始手忙脚乱的跳网页，找位置。pr自己的仓库，打开自己的仓库。有时候要连续开4、5个页面，才能到你想要的那个仓库位置。一个仓库还好，如果是十多个，那就太累人了，况且GitHub的网页加载速度并不快。[/size]

[size=16px]这个时候，最好的解决方案就是将你负责的仓库拉取到本地，你只需要在你的本地就能够将一切任务处理完毕，无需上GitHub的网页版，极为的方便。[/size]

[size=16px]这是利用GitHub桌面版将仓库clone到本地的教程：[/size]

[size=16px][url=https://www.jianshu.com/p/1e45b93bd593]https://www.jianshu.com/p/1e45b93bd593[/url][/size]

[size=16px]只需进行下载并安装了桌面版GitHub之后，执行教程的第二步，就可以将仓库拉取到本地了！接下来的任务就是进一步把你的仓库clone到本地，这样就根本无需打开网页端的GitHub，本地一站式解决！[/size]

[size=16px]但是这里还有一个极为严峻的问题：一般而言，在没有隧穿术的情况下，只有早上八九点的时候才能以很快的速度进行clone，一旦不在这个时间区域内，clone的速度就只能听天由命了，而且绝大部分时候都满的犹如龟爬，仅有 几K/s 的速度。[/size]

[size=16px]如果你仍然没有学会隧穿术，那么这里有一些别人写过的方法，可以供你参考：[/size]

[size=16px][url=https://zhuanlan.zhihu.com/p/144016106]https://zhuanlan.zhihu.com/p/144016106[/url][/size]

[size=16px]改Host时灵时不灵，大部分情况下没什么用。[/size]

[size=16px]码云没试过，可以稍微尝试一下。[/size]

[size=16px]如果你打算通过秘法巫术的形式解决下载速度过慢的问题，那么请务必把你的隧穿术开向美国，对于我自己而言，一旦将隧穿术开到美国，clone速度将会急剧增加。我最快的clone速度达到过5M，虽然没什么用就是了。[/size]

[size=16px]这是一个成功clone的仓库在GitHub桌面版的样子：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/aYhFyzlTfZCwMc4.jpg[/img][/size]

[size=16px]更改之后的操作：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/17qjE2IdklZN6Kb.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/14/ZwgON6jv9pqBRun.jpg[/img][/size]

[size=16px]如果你想要更加完善你的本地Git操作，那么这两个扩展必不可少：[/size]

[size=16px][list=1]
[*]GitHub Pull Requests and Issues
[*]GitLens-Git supercharged[/list][/size]
[size=16px]安装之后，只要你熟悉GitHub的操作，你将很快明白这两个扩展如何使用。[/size]

[size=16px][page][/size]

[size=14px][b]pull request[/b][/size]

[size=16px]什么是[b]Pull Request[/b]？[/size]

[size=16px]翻译过来就是“拉取请求”。我们在Fork的仓库里做的修改都只是自己的，和原仓库没有什么关系。但是如果你想把你的修改合并到原仓库，那么，你需要问一问作者，“我能不能把我的修改合并到你的仓库呢？”，这一过程就被叫做“拉取请求”。这一过程实质上[b]就是把你做的修改同步到原仓库那边[/b]，但这一过程必须询问过仓库主人，因为“私闯民宅”是[b]犯法的[/b]。[/size]

[size=16px]网上有极多的pr教程，如果觉得我说的不够清晰，那么请自行百度。只需输入“GitHub pull request”即可。[/size]

[size=16px]这是一个比较清晰的教程：[/size]

[size=16px][url=https://www.cnblogs.com/zhangjianbin/p/7774073.html]https://www.cnblogs.com/zhangjianbin/p/7774073.html[/url][/size]

[size=16px]在熟练之后，我们很快就能发现Git的工作流程的实际样貌：Fork→修改自己的仓库→发送pr。[/size]

[size=16px]有些新手可能会有疑问：我直接修改作者仓库里的内容，它也会提示我发起pr，那为什么一定要先fork再pr呢？[/size]

[size=16px]实际上，这样子做确实可以发起pr，但是这并不意味着你没有fork作者的仓库，我们可以看一个例子（保密起见，我把名字掩去，但这确实是同一个人）：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/lsM8gC2kircKzJo.jpg[/img][/size]

[size=16px]这是一个新手对一个原作者仓库连续发起的三个pr，可以肯定，这个新手肯定是直接修改了原作者的仓库，并且连续修改了三次，导致发起了三次pr。我们可以看看这三个pr都是从哪里发起的：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/gchlAGPHXVQJ1Ib.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/15/EALgGz5cJSlZ1RW.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/15/ELXPKZp8DTnmIi6.jpg[/img][/size]

[size=16px]可以看到，这位新手对着原作者仓库的分支，连续用三个不同的分支向其发起了pr，而这些分支其实都是来源于他fork的仓库的：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/GmjbJysNzXLUvAE.jpg[/img][/size]

[size=16px]也就是说，你在修改原作者仓库的时候，GitHub自动的为你fork了原作者的仓库，并将你的改动应用到你的fork仓库的不同分支上（然而，改动的转移规则有点不明确），然后再从这些分支发起pr到原作者的仓库那里。这样做实际上没有能够理解pr的本质：pr是实际上是两个分支之间的合并，不仅仅是两个仓库之间的合并，即便在同一个仓库，你也可以用A分支 pr B分支，这是完全可以。[/size]

[size=16px]而这种连开三个pr有什么不好的地方？其实从操作层面上来说，没有太多的不好的地方，但这里批判这种连开三个pr的行为不是说他不好，而是在说，这种行为其实说明pr发起者没有理解pr的意义，不仅如此，也不了解GitHub的pr机制，以及这里谈及的Git的工作流程。一个最显而易见的问题是：如果你根本不能理解pr是如何运作的，那么，你应该如何为你的pr追加新的改动？正确的操作是：你得在你pr对应的分支上再继续commit，这些commit会自动推送到这个分支开启的pr上，然后你的追加改动就可以成功的被原作者看到了。如果你不了解pr的机制，你可能就会把追加过后的内容再开一个pr，这样子效率十分低下。 [page][/size]

[size=14px][b]review（比较重要的可选项）[/b][/size]

[size=16px]这是一个看上去可以被忽视的过程，但实际上，如果你不想被[b]其它的翻译者锤[/b]，你最好做这一道流程。[/size]

[size=16px]具体该如何做呢？这里放出[url=https://github.com/LWHK]LWHK[/url]的一个[url=https://github.com/LWHK/Create/pull/1]pr[/url]，来供大家作为讲解例子。[/size]

[size=16px]打开pr页面之后，我们点击此处：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/mXl5HjDuRLFNnEW.jpg[/img][/size]

[size=16px]进入到如下界面：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/QzmunFbEdf6pTtw.jpg[/img][/size]

[size=16px]在本页面中，本次pr的所有文件更改内容都会显示出来。将鼠标移至每一行前面，可以发现多了一个小加号：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/nemCb9WsfaMh4P2.jpg[/img][/size]

[size=16px]点击这个+，你就可以针对于这一行的内容进行评论，评论完之后，点击start a review即可，如果你只是单纯的想发表一下对于这一行的一些想法，那么你可以点击Add single comment，如果突然间没意见了，可以点击cancel。[/size]

[size=16px][img]https://i.loli.net/2020/08/14/1NycTqx657zrELv.jpg[/img][/size]

[size=16px]完成了所有文件的查看之后，你可以点击屏幕右上角的这个。如果你觉得有很多地方需要更改，那么就点击Request changes（请求修改），如果你发现没有什么好改的，你就点击approve（批准，赞成），如果你只是来划水的，你可以点击comment。 [img]https://i.loli.net/2020/08/14/zG7aLPug1VXnxlI.jpg[/img][/size]

[size=16px]有时候你需要特定的人帮助你review你的pr，这时候你可以在pr里发送@信息，或者在右边的这里指定他帮助你pr（注意，这一操作只有仓库主人才可以进行！如果你没有该仓库的权限，那么你是无法在右边专门指定人为你review的，此时你只能@他过来）：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/Q6DW2eMJPCmAUGS.jpg[/img][/size]

[size=16px]这是@的例子：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/1bB2rZh4ivnKfud.jpg[/img][/size]

[size=16px]再次警告：无论你觉得你的实力多强，只要你不是神，你就会犯错误，而且往往是低级的错误，这些时候如果没有人帮助你review，那么你的错误将会被别人看到，被别的汉化者锤，如果你不想这样，请你一定要找人帮助你review！！[/size]

[size=16px]最后贴上一些例子，都是我自己的：[/size]

[size=16px][url=https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/768]https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/768[/url][/size]

[size=16px][url=https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/779]https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/779[/url][/size]

[size=16px][url=https://github.com/Phylogeny/JEIEnchantmentInfo/pull/1]https://github.com/Phylogeny/JEIEnchantmentInfo/pull/1[/url][/size]

[size=16px][page][/size]

[size=14px][b]与原仓库同步[/b][/size]

[size=16px]很多时候，作者更新了仓库，然后你发现他新加入了一些物品，理所当然的，语言文件里也多出了这些新物品的条目。你很快就意识到了这一点：你的仓库落后于作者的仓库，如果你想翻译这些新的内容，那么，你必须把新的内容拉取到你的仓库。最简单的方法就是在你的仓库发起一个反向pr，不是你pr他，而是他pr你。[/size]

[size=16px]如果使用是本地操作，就得使用命令行进行fetch + merge了，请参考：[/size]

[size=16px][url=https://www.cnblogs.com/jjliu/p/11775845.html]https://www.cnblogs.com/jjliu/p/11775845.html[/url][/size]

[size=16px]命令行在本地仓库极为有用，建议认真在网上找教程学习。[/size]

[size=16px][page][/size]

[size=20px][b]原库提交（不推荐新手）[/b][/size]

[size=16px]原库提交，指的就是向mod的原仓库提交你的汉化。这一行为无异于宣称你开始负责本模组的汉化，所以不推荐新人这样做，逐步积攒经验之后，才有能力承担一个mod的官中。[/size]

[size=16px]官库提交的流程与以上提到的提交流程是一个流程，按着操作即可。[/size]

[size=16px]注意，原库提交意味着mod作者不会帮助你review，你必须自行找人，@他过来帮助你review才行。 [page][/size]

[size=20px][b]CFPA提交（仅限1.12.2）[/b][/size]

[size=16px]自动汉化模组的提交途径是我最推荐新手使用的，因为自动汉化的维护者会帮你review（逃）。提交手段与上述的并无二致，唯一要注意的是文件存放的位置。 [page][/size]

[size=16px][b]CFPA仓库地址以及项目存放位置[/b][/size]

[size=16px]CFPA仓库地址：[url=https://github.com/CFPAOrg/Minecraft-Mod-Language-Package]https://github.com/CFPAOrg/Minecraft-Mod-Language-Package[/url][/size]

[size=16px]注意，所有的汉化项目 应该被放置到该路径下：[/size]

[size=16px][img]https://i.loli.net/2020/08/14/89ACU1aY3XFGDhW.jpg[/img][/size]

[size=16px]点进这里后，你会发现成吨的已经汉化过了的项目（感谢各位的辛勤付出），你需要将你的文件上传至此处，但你必须适当的存放你的文件。还记得第一节中的mod的压缩包结构吗？即 assets\模组 ID\lang ，你会发现，这里的每个项目也都是这样存放的，你需要手动为你的文件创建一个新的文件夹，并将文件夹命名为模组id，然后在其中再次创建一个名为lang的文件夹，然后再把你的汉化文件放进去。这一操作本质上就是将模组文件夹的结构复刻到仓库里，只不过这一次，多了你新放进去的汉化文件。[/size]

[size=16px]注意，你最好把你所翻译的对应英语文本同样放进去，这样会方便后来者查看。其它语言的则不用。 [page][/size]

[size=24px][b]通过Weblate进行汉化工作[/b][/size]

[size=16px][page][/size]

[size=32px][b]汉化的一些注意事项[/b][/size]

[size=16px]考虑到可能看这篇的大部分都是新手翻译者（废话，大佬本来就不多），所以，除了一些硬件上的需求，还得提前说好一些mc翻译圈内的规矩，避免冲塔/自爆卡车，然后怪我在贴内没有说清楚。 [page][/size]

[size=24px][b]每天一个机翻小技巧，有手就能学废[/b][/size]

[size=16px][img]https://i.loli.net/2020/08/14/pFscVL4zKCMxZHB.jpg[/img][/size]

[size=16px][img]https://i.loli.net/2020/08/14/rJKecbwDQ6nFYBU.jpg[/img][/size]

[size=16px]机翻是一种极为严重的错误行为，任何在模组翻译圈中的机翻行为都必须完全抵制。在这里我要谨慎的区分开我前面谈到的，利用Quicker帮助替换颜色文本和机翻具有[b]本质性区别[/b]。我们抵制机翻不是为了证明某种由人翻译所产生的抽象本质的威严性，而是为了抵制由机翻带来的不通顺的，错误的，乃至于离谱的翻译。这种抵制建立在纯粹的[b]实用层面[/b]上，而不是在抽象的行为区分上。这里可以引出一个非常明显的悖谬：面对着一个翻译的比人更像人的机器，我们是应该抵制呢？还是支持呢？如果一个人不使用这样的机器生产翻译，而是自己翻译（质量上肯定差于机器翻译），那么，站在用户的角度，我们是应该支持，还是抵制呢？[/size]

[size=16px]我个人不愿意从纯粹的行为角度区分机翻和人翻，这样子似乎走入了某种[b]本质性幻觉[/b]之中，我们试图在人翻和机翻之间找到某种本质性裂缝，这一裂缝展开了价值上的区分。然而，这样的裂缝真的存在吗？我认为这是需要辩驳的。[/size]

[size=16px]抛开纯粹的思辨，如果我们站在实用的立场上，我们就可以发现，在颜色替换这样的例子上，其与机翻有[b]实用层面的本质区别[/b]。在这种情境下，人翻和机翻在[b]纯粹语词[/b]的层面没有差别，这意味着在[b]纯粹实用[/b]的层面也没有区别，你根本无从分辨哪个是机翻哪个是人翻，你只能凭借[b]非实用层面[/b]的因素进行区分。但是这样的区分在我看来，构不成价值上的判断，所以无须批判颜色替换的问题，需要批判的是由机翻带来的坏翻译。 [page][/size]

[size=24px][b]意外情况[/b][/size]

[size=16px]有时你会发现，你翻译出来的文本出现了奇怪的问题：明明把翻译文件放进了模组文件内，但游戏中不加载；加载了，居然是乱码；又或者只有单独的一些东西没有加载。这些情况我会在本节中为你们梳理一下，避免被坑。 [page][/size]

[size=20px][b]不加载[/b][/size]

[size=16px]不加载又分为两种情况：完全不加载和部分不加载。[/size]

[size=16px][page][/size]

[size=16px][b]完全不加载[/b][/size]

[size=16px]首先检查文件名是否正确，一般而言，在1.12.2中，中文文件可能会有两种名字 ，一种为zh_cn.lang，一种为zh_CN.lang，看似只有尾巴的大小写差异，但实际上，如果英语语言文件的尾巴是大写的，然后你放了一个小写尾巴的中文文件进去，它是[b]不会加载的[/b]。中文文件的尾巴的大小写必须跟随英文文件尾巴的大小写。[/size]

[size=16px]这是一个错误的例子：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/JZAIQs3g5a7cqXu.jpg[/img][/size]

[size=16px]这是一个正确例子：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/BHuxSFjIeUhQp9P.jpg[/img][/size]

[size=16px]1.12.2以上则不是lang文件，而是.json文件。似乎.json文件没有尾巴大小写的说法，全是小写（至少我没见过）。[/size]

[size=16px]第二个就是检查文件位置，这个不用我多说。[/size]

[size=16px][page][/size]

[size=16px][b]部分不加载[/b][/size]

[size=16px]部分不加载，则有可能是因为key错误，所谓的key错误，就是语言文件中每一行的左边部分，1.12.2的lang是以 = 为界，1.12.2以上的json文件则为 : 为界，你需要单独检查一下那些有了翻译，但是游戏中没有加载的词条的key。[/size]

[size=16px]这是一个修复了key错误的commit：[/size]

[size=16px][url=https://github.com/LWHK/LWHK-Simplified-Chinese-Translation/commit/0c8a8914f5f0124fa31c521997b983d8c556c877#diff-306fabd320470aaa7a1f902a579b1a4a]https://github.com/LWHK/LWHK-Simplified-Chinese-Translation/commit/0c8a8914f5f0124fa31c521997b983d8c556c877#diff-306fabd320470aaa7a1f902a579b1a4a[/url][/size]

[size=16px]也有一些情况，那就是根本没有key，作者把文本写进了代码中，这个情况你就需要较高的技术力了。如果你懂代码，那么你就能明白怎么改；如果你不懂代码，在issue界面和作者反馈问题就好了，不必勉强自己。[/size]

[size=16px]这是一个issue反馈（NoName德里奇的例子）：[/size]

[size=16px][url=https://github.com/MysticMods/MysticalWorld/issues/126]https://github.com/MysticMods/MysticalWorld/issues/126[/url][/size]

[size=16px]这是一个手动改硬编码的例子（前提是你能看得懂作者是怎么样写的）：[/size]

[size=16px][url=https://github.com/TUsama/Roots/commit/a12922af9aa8b1a17e756444749e4c11bfd6022b]https://github.com/TUsama/Roots/commit/a12922af9aa8b1a17e756444749e4c11bfd6022b[/url][/size]

[size=16px][page][/size]

[size=20px][b]文字乱码[/b][/size]

[size=16px]文本都会涉及到一个问题，那就是编码问题。如果你的文本是UTF-8的编码，然而你的游戏使用了GBK的编码方式，那么自然只能出现乱码。详细的可以去网上搜一搜。[/size]

[size=16px]在vsc中，下方导航条的右侧会显示出vsc当前是用什么编码打开该文件：[/size]

[size=16px][img]https://i.loli.net/2020/08/15/lkprt6uXONJfVmh.jpg[/img][/size]

[size=16px]注意，无论是lang还是手册，编码格式一定得是UTF-8，不能是其它的。有些模组自带手册，但是忘记定义了调用Java解码的字符集，此时Java就会调用你的系统默认的字符集进行解码。如果使用UTF-8进入游戏，则会通篇全为乱码。[b]但是这不是你的问题[/b]。你要做的就是在他的仓库的issue那里贴上这个[url=https://github.com/Electroblob77/Wizardry/pull/479]pr[/url]，作者自然就会明白了。[/size]

